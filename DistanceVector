#!/usr/bin/env python3

import sys
from copy import deepcopy

INF = float('inf')

class Router:
    def __init__(self, name):  #each router has seperate name, neighbour, table, received
        self.name = name
        self.neighbors = {}  #  cost
        self.dv_table = {}   # "destination" : ("next_hop", cost)
        self.received_vectors = {}  # neighbors' dv tables
    
    # ============================Input Parsing=========================================== 
    
    """Read input in a standard way and split it into nodes, edges and updates ."""
    @staticmethod
    def parse_input():    # start, update, end
        lines = []        # read not empty input 
        for line in sys.stdin:
            line = line.strip()
            if line:              
                lines.append(line)

        nodes, edges, updates = [], [], []
        mode = 'nodes'
        for line in lines:
            if line == 'START':
                mode = 'edges'
            elif line == 'UPDATE':
                mode = 'updates'
            elif line == 'END':
                break
            else:
                if mode == 'nodes':
                    nodes.append(line)
                elif mode == 'edges':
                    u, v, w = line.split()   # u:start, v:end, w:cost
                    edges.append((u, v, int(w)))
                    edges.append((v, u, int(w)))
                elif mode == 'updates':
                    parts = line.split()
                    if len(parts) == 3:  
                        u, v, w = parts
                        updates.append((u, v, int(w)))
                        updates.append((v, u, int(w)))
                        for node in (u, v):
                            if node not in nodes:
                                nodes.append(node)
        return nodes, edges, updates

    # ======================= Initialisation ============================
    """ Use direct link costs to fill `dv_table`. If indirect use 'INF' """
    def initialize(self, nodes):  # dv_table： if exist continue, else “INF”
        for node in nodes:
            if node == self.name:
                continue
            if node in self.neighbors:   
                self.dv_table[node] = (node, self.neighbors[node])   #self.neighbors[node]: cost
            else:
                self.dv_table[node] = (None, INF)   # not exist: "INF"

    # ===================== Send Distance Vector =======================
    """Build the distance vector information that the router will send to the
        neighbour 
    """
    def send_vector(self, to_nei=None):
        vector = {}
        for dest, (_, cost) in self.dv_table.items():
            vector[dest] = cost
        return vector

    
    # ==========================Update the DV Table============================================= #
    """
        For every neighbour, calculate
                cost(x to nei) + noticed_cost(nei to dest)
        and keep the shortest one; save that neighbour as the new next-hop.

        If any destination cost changes compared with the previous iteration, return True and the main loop
        the network still need to be update.
    """
    def renew_vector(self):
        changed = False
        new_table = {}
        for dest in self.dv_table:
            if dest == self.name:
                continue

            min_cost = self.neighbors.get(dest, INF)  # direct cost
            next_hop = dest if dest in self.neighbors else None

            for neighbor in self.neighbors:
                if neighbor in self.received_vectors and dest in self.received_vectors[neighbor]:
                    adv_cost = self.received_vectors[neighbor][dest]
                    if adv_cost != INF:
                        total_cost = self.neighbors[neighbor] + adv_cost
                        if total_cost < min_cost:
                            min_cost = total_cost
                            next_hop = neighbor

            if min_cost == INF:
                next_hop = None

            # check change
            current_next_hop, current_cost = self.dv_table[dest]
            if (next_hop != current_next_hop) or (min_cost != current_cost):
                changed = True

            new_table[dest] = (next_hop, min_cost)
        
        self.dv_table = new_table
        return changed
    # =================== Distance Table of router ===================
    def print_distance_table(self, nodes, t):
       
        print(f"Distance Table of router {self.name} at t={t}:")

        others = sorted(n for n in nodes if n != self.name)

        print("     " + "  ".join(f"{via:>4}" for via in others))

        # for each dest 
        for dest in others:
            row_vals = []
            for via in others:              
                if via not in self.neighbors:        
                    cost = INF
                elif dest == via:                   
                    cost = self.neighbors[via]
                else:
                    adv = self.received_vectors.get(via, {})
                    adv_cost = adv.get(dest, INF)
                    cost = (self.neighbors[via] + adv_cost) if adv_cost != INF else INF
                row_vals.append("INF" if cost == INF else str(cost))
    
            print(f"{dest:>4}  " + "  ".join(f"{c:>4}" for c in row_vals))
        print()


        # ======================  Routing Table ======================
    def print_routing_table(self):
        print(f"Routing Table of router {self.name}:") #Routing Table of router X:
        for dest in sorted(self.dv_table):
            next_hop, cost = self.dv_table[dest]
            if cost == INF:
                print(f"{dest},INF,INF")
            else:
                print(f"{dest},{next_hop},{cost}")
        print()

# ======================  Routers  ======================
def build_topology(nodes, edges): # u: start v:dest w:cost
    routers = {name: Router(name) for name in nodes}
    for u, v, w in edges:
        if w == -1:  #delete
            routers[u].neighbors.pop(v, None)
            routers[v].neighbors.pop(u, None)
        else:   
            routers[u].neighbors[v] = w
            routers[v].neighbors[u] = w
    return routers

# ========================= Simulation Driver ===================================== #
""" Run DV iterations until all routers converge.
    """
def simulate_dv(routers, print_tables=True, init=True, start_t=0):
    nodes = sorted(routers.keys())
    if init:
        for r in routers.values():
            r.initialize(nodes)

    t = start_t

    # print tables
    if print_tables:
        for r in sorted(routers.values(), key=lambda x: x.name):
            r.print_distance_table(nodes, t)

    while True:
        vectors = {name: r.send_vector() for name, r in sorted(routers.items())}
        for r in routers.values():
            r.received_vectors = {nei: vectors[nei] for nei in r.neighbors}

        #update dv table
        changed = False
        for r in routers.values():
            if r.renew_vector():
                changed = True

        t += 1

        if print_tables:
            for r in sorted(routers.values(), key=lambda x: x.name):
                r.print_distance_table(nodes, t)

        if not changed:
            break

    for r in sorted(routers.values(), key=lambda x: x.name):
        r.print_routing_table()
    return t

# =============================== apply updates ============================================ #

def apply_updates(routers, updates):
    for u, v, w in updates: # u:start, v:dest, w:cost
        if u not in routers:
            routers[u] = Router(u)
        if v not in routers:
            routers[v] = Router(v)
        if w == -1:
            routers[u].neighbors.pop(v, None)
            routers[v].neighbors.pop(u, None)
        else:
            routers[u].neighbors[v] = w
            routers[v].neighbors[u] = w

# ========================= main  ===================================== #
if __name__ == '__main__':
    nodes, edges, updates = Router.parse_input()
    routers = build_topology(nodes, edges)

    # init
    t = simulate_dv(routers, print_tables=True, init=True, start_t=0)

    # update
    if updates:
        apply_updates(routers, updates)
        simulate_dv(routers, print_tables=True, init=False, start_t=t)  # 继承时间步长

